#include <cassert>    // Provides assert
#include <cstdlib>   // Provides NULL, std::size_t
#include <iomanip>    // Provides std::setw
#include <iostream>   // Provides std::cout


    template <class Process, class BTNode>
    void inorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            inorder(f, node_ptr->left( ));
            f( node_ptr->data( ) );
            inorder(f, node_ptr->right( ));
        }
    }

    template <class Process, class BTNode>
    void postorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            postorder(f, node_ptr->left( ));
            postorder(f, node_ptr->right( ));
            f(node_ptr->data( ));
        }
    }

    template <class Process, class BTNode>
    void preorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            f( node_ptr->data( ) );
            preorder(f, node_ptr->left( ));
            preorder(f, node_ptr->right( ));
        }
    }

    template <class Item, class SizeType>
    void print(const binary_tree_node<Item>* node_ptr, SizeType depth)
    // Library facilities used: iomanip, iostream, stdlib
    {
        if (node_ptr != NULL)
        {
            print(node_ptr->right( ), depth+1);
            std::cout << std::setw(4*depth) << ""; // Indent 4*depth spaces.
            std::cout << node_ptr->data( ) << std::endl;
            print(node_ptr->left( ),  depth+1);
        }
    }

    template <class Item>
    void tree_clear(binary_tree_node<Item>*& root_ptr)
    // Library facilities used: cstdlib
    {
    if (root_ptr != NULL)
    {
        tree_clear( root_ptr->left( ) );
        tree_clear( root_ptr->right( ) );
        delete root_ptr;
        root_ptr = NULL;
    }
    }

    template <class Item>
    binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr)
    // Library facilities used: cstdlib
    {
    binary_tree_node<Item> *l_ptr;
    binary_tree_node<Item> *r_ptr;

    if (root_ptr == NULL)
        return NULL;
    else
    {
        l_ptr = tree_copy( root_ptr->left( ) );
        r_ptr = tree_copy( root_ptr->right( ) );
        return
        new binary_tree_node<Item>( root_ptr->data( ), l_ptr, r_ptr);
    }
    }

    template <class Item>
    size_t tree_size(const binary_tree_node<Item>* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr == NULL)
            return 0;
        else
            return
        1 + tree_size(node_ptr->left( )) + tree_size(node_ptr->right( ));
    }

//other stuff

template<class Item>
{
    binary_tree( ){
        root = NULL;
        current_node = NULL;
        node_number = 0;
    }
    binary_tree(const binary_tree& source){
        tree_copy(source.root);
    }

    ~binary_tree( ){
        tree_clear(root);
        node_number = 0;
    }
    // MODIFICATION MEMBER FUNCTIONS
    void create_first_node(const Item& entry){
        if(size() == 0){
            root = new binary_tree_node<Item>(entry);
            current_node = root;
            node_number = 1;
        }
    }
    void shift_to_root( ){
        root = current_node;
    }
    void shift_up(binary_tree_node<Item> root,binary_tree_node<Item> current_node){
        if (has_parent(root, current_node)){
            if (current_node == root || root == NULL){
                }
                else{
                    if(root->left()== current_node || root->right()==current_node)
                        current_node = root;
                    else {
                        if (root->data<current_node->data) {
                            shift_up(root->right(), current_node);
                        }
                        else {
                            shift_up(root->left(), current_node);
                        }
                    }
                }
            }
        }
    void shift_left( ){
        if(has_left_child()){
            current_node = current_node->left();
        }
    }
    void shift_right( ){
            if(has_right_child()){
                current_node = current_node->right();
            }
    }

    void change(const Item& new_entry){
        current_node->data() = new_entry;
    }
    void add_left(const Item& entry){
        if(!has_left_child()){
            current_node->left() = new binary_tree_node<Item>(entry);
            node_number += 1;
        }
    }
    void add_right(const Item& entry){
        if(!has_right_child()){
            current_node->right() = new binary_tree_node<Item>(entry);
            node_number += 1;
        }
    }
    // CONSTANT MEMBER FUNCTIONS
    std::size_t size( ) const{
        return node_number;
    }
    Item retrieve( ) const{
        if(size() > 0){
            return current_node->data();
        }
    }
    bool has_parent(binary_tree_node<Item> root,binary_tree_node<Item> current_node) const{
    if (current_node == root || root == NULL){
                return false;
        }
        else{
            if(root->left()== current_node || root->right()==current_node)
                return true;
            else {
                if (root->data<current_node->data) {
                    return has_parent(root->right(), current_node);
                }
                else {
                    return has_parent(root->left(), current_node);
                }
            }
        }
    }
    bool has_left_child( ) const{
        if(size() > 0){
            if(current_node->left() != NULL){
                return true;
            }
            else{
                return false;
            }
        }
    }
    bool has_right_child() const{
    if(size() > 0){
        if(current_node->right() != NULL){
            return true;
        }
        else{
            return false;
        }
    }
}
    binary_tree_node<Item> get_root(){return *root;}
    binary_tree_node<Item> get_currentNode(){return current_node;}
}
